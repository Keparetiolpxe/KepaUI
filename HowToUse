--[[
~
~Made by Kepa
Kepa UI

--Getting Library
local Lib,helping = loadstring(game:HttpGet("https://raw.githubusercontent.com/Keparetiolpxe/KepaUI/main/Source"))()
local Library,helping = loadstring(game:HttpGet("https://raw.githubusercontent.com/Keparetiolpxe/KepaUI/main/Source"))()
--Creating KeySystem
Library:KeySys("Key","link.com/...",function()
	--Creating window, can be done without KeySystem
~	local window = Library:window("Title",1.0)--Title,Version - any number, will look like - v1, v2, v3 etc.
~	--Creating Tab
~	local Tab1 = window:tab("Tab")--Name
~	--Creating Button
~	local Button = Tab1:button("Name","Description",function()--Name,Description,Function on Click
~		print("Clicked")
~	end)
~	--[[
~		Ways to change Button properties
~		
~		Button:ChangeName("Changed Button") --Changes button name
~		Button:ChangeDescription("Changed Description") --Changes button Description/Info
~		Button:ChangeCallback(function() --Changes callback - function on click
~			print("Changed Callback") 
~		end)
~		Button:Fire() --Fires click function
~		Button:Break() --Removes button from window
~	]]
~	
~	
~	--Creating Toggle
~	local Toggle = Tab1:toggle("Toggle","Description",false,function(bool)--Name,Description,CurrentValue,Callback(Status) - Function on click with returned status
~		print(bool)
~	end)
~	--[[
~		Ways to change Toggle properties
~		
~		Toggle:ChangeName("Changed Toggle") --Changes toggle name
~		Toggle:ChangeDescription("Changed Description") --Changes toggle Description/Info
~		Toggle:ChangeValue(true)--Sets status of Toggle activated and calls callback
~		Toggle:ChangeCallback(function(bool) --Changes callback - function on click with returned status
~			print(bool)
~		end)
~		Toggle:Break() --Removes toggle from window
~	]]
~	
~	
~	--Creating Slider
~	local Slider = Tab1:slider("Slider","Description",0,100,1,0.1,function(value)--Name,Description,minValue,maxValue,CurrentValue,Increment,callback(Value) - Function on changed slider with returned value
~		print(value)
~	end)
~	--[[
~		Ways to change Slider properties
~		
~		Slider:ChangeName("Changed Slider") --Changes slider name
~		Slider:ChangeDescription("Changed Description") --Changes slider Description/Info
~		Toggle:ChangeInterval(1,200) --Changes min and max value
~		Toggle:ChangeValue(150) --Sets current value of slider and calls callback
~		Toggle:ChangeIncrement(0.1) -- Changes Increment of slider
~		Toggle:ChangeCallback(function(value) --Changes callback - function on click with returned status
~			print(value.." from changed slider")
~		end)
~		Toggle:Break() -- Removes slider from window
~	]]
~	
~	
~	--Creating Dropdown
~	local Dropdown = Tab1:dropdown("Dropdown","Description",{"option1","option2"},"option1",function(value)--Name,Description,OptionsTable(only strings - "..."),CurrentOption,callback(Option) - Function on changed dropdown with returned option
~		print(value)
~	end)
~	--[[
~		Ways to change Dropdown properties
~		
~		Dropdown:ChangeName("Changed Dropdown") --Changes dropdown name
~		Dropdown:ChangeDescription("Changed Description") --Changes dropdown Description/Info
~		Dropdown:Select("option1")--Selects Option, could be any string but recommend to use from current options to not confuse the user
~		Dropdown:ChangeList({"option1new","option2new"}) --Clears last list and adds new one. Can also be used for clearing options by clearing the table - {}
~		Dropdown:AddList({"option3","option4"}) --Adds more options to last list without clearing it
~		Dropdown:ChangeCallback(function(value) --Changes callback - function on click with returned status
~			print(value.." from changed dropdown")
~		end)
~		Dropdown:Break() --Removes dropdown from window
~	]]
~	--Creating Label
~	local Label = Tab1:label("Label","Description")--Name,Description
~	--[[
~		Ways to change Label properties
~		Label:ChangeName("Changed Label") --Changes Label Name
~		Label:ChangeDescription("Changed Description") --Changes Description/Info
~		Label:Break() --Removes Label from window
~	]]
~	
~	
~	--Creating Box
~	local Box = Tab1:box("Box","Description","currentvalue",function(text)--Name,Description,CurrentValue,Callback(inputedText)
~		print(text)
~	end)
~	--[[
~		Ways to change Box properties
~		Box:ChangeName("Changed Box") --Changes Box Name
~		Box:ChangeDescription("Changed Description") --Changes Box Description/Info
~		Box:ChangeValue("Change") --Changes Box text and doing callback
~		Box:Break() --Removes Box from window
~	]]
~	
~	
~	--Creating Keybind
~	local Keybind = Tab1:keybind("Keybind","Description",Enum.KeyCode.B,function(key,stringkey)--Name,Description,StarterKeybind,Callback(key(Enum),stringified(string) - example: Converts Enum.KeyCode.RightShift into "RightShift" as string)
~		print(stringkey.." was pressed")
~	end)
~	--[[
~		Ways to change Keybind properties
~		Keybind:ChangeName("Changed Keybind") --Changes Name of Keybind
~		Keybind:ChangeDescription("Changed Description") --Changes Keybind Description/Info
~		Keybind:ChangeBind(Enum.KeyCode.LeftBracket") --Changes Keybind of Keybind
~		Keybind:ChangeCallback(function(k,sk)
~			print(sk.." was pressed and callback changed")
~		end)
~	]]
~	
~	
~	--Creating UIBreaker
~	local UIBreaker = Tab1:uibreaker()--No Info can be provided
~	--[[
~		Ways to change UIBreaker properties
~		UIBreaker:Fire() --Closes UI
~		UIBreaker:Break() --Removes UIBreaker from window
~	]]
~	
~	
~	
~	
~	
~	
~	--//Other\\--
~	Library:notification("Title","Title-Description",5,function() --Title, Title Description, Self-destruct time(seconds), callback on clicking "Ok", if you don't provide callback then it does nothing on "Ok"
~		print("User agreed")
~	end)
~end)
~
~
~
~Documentation is not ended and in developing, will be finished 29.06.2023. Also I'll make this UI useable for everyone at this day I think. It is not useable for others because you can't change Discord link currently.
~
~
~]]
